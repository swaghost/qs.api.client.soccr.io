/**
 * soccr.io API
 * An ASP.NET Core Web API for managing Soccer items
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CommonResult } from '../model/models';
import { ContextEntry } from '../model/models';
import { SportsTrashTalk } from '../model/models';
import { SportsTrashTalkApplication } from '../model/models';
import { SportsTrashTalkAutoComplete } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface TrashTalkServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param Context 
     */
    selectContextTrashTalkEntriesForContext(Context?: string, extraHttpRequestParams?: any): Observable<Array<ContextEntry>>;

    /**
     * 
     * 
     */
    selectTrashTalkContextTypes(extraHttpRequestParams?: any): Observable<Array<string>>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     * @param SearchTerm 
     */
    sportTrashTalkearchAllNotInContext(Context?: string, ContextKey?: number, SearchTerm?: string, extraHttpRequestParams?: any): Observable<Array<SportsTrashTalkAutoComplete>>;

    /**
     * 
     * 
     */
    sportTrashTalkelectAll(extraHttpRequestParams?: any): Observable<Array<SportsTrashTalk>>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    sportTrashTalkelectAllForContext(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<Array<SportsTrashTalk>>;

    /**
     * 
     * 
     * @param TrashTalkID 
     */
    sportTrashTalkelectItemForDisplay(TrashTalkID?: number, extraHttpRequestParams?: any): Observable<SportsTrashTalk>;

    /**
     * 
     * 
     * @param TrashTalkID 
     */
    sportTrashTalkelectItemForEdit(TrashTalkID?: number, extraHttpRequestParams?: any): Observable<SportsTrashTalk>;

    /**
     * 
     * 
     */
    sportTrashTalkelectRandom(extraHttpRequestParams?: any): Observable<SportsTrashTalk>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    sportTrashTalkelectRandomForContext(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<SportsTrashTalk>;

    /**
     * 
     * 
     * @param TrashTalkID 
     * @param Context 
     * @param ContextKey 
     */
    trashTalkApplicationDelete(TrashTalkID?: number, Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param body 
     */
    trashTalkApplicationDeleteByKey(body?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param SportsTrashTalkApplication 
     */
    trashTalkApplicationInsertUpdate(SportsTrashTalkApplication?: SportsTrashTalkApplication, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param TrashTalkID 
     */
    trashTalkApplicationSelectAll(TrashTalkID?: number, extraHttpRequestParams?: any): Observable<Array<ContextEntry>>;

    /**
     * 
     * 
     * @param TrashTalkID 
     */
    trashTalkDelete(TrashTalkID?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param SportsTrashTalk 
     */
    trashTalkInsert(SportsTrashTalk?: SportsTrashTalk, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param SearchText 
     */
    trashTalkSearch(SearchText?: string, extraHttpRequestParams?: any): Observable<Array<SportsTrashTalk>>;

    /**
     * 
     * 
     * @param SportsTrashTalk 
     */
    trashTalkUpdate(SportsTrashTalk?: SportsTrashTalk, extraHttpRequestParams?: any): Observable<CommonResult>;

}
