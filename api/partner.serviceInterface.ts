/**
 * soccr.io API
 * An ASP.NET Core Web API for managing Soccer items
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CommonResult } from '../model/models';
import { ContextSponsorshipAssignmentDetail } from '../model/models';
import { ContextSponsorshipAssignmentUpdateModel } from '../model/models';
import { ContextSponsorshipMediaDetail } from '../model/models';
import { PartnerCandidate } from '../model/models';
import { PartnerCandidateStatus } from '../model/models';
import { PartnerDashboardStats } from '../model/models';
import { PartnerLevel } from '../model/models';
import { PartnerNeed } from '../model/models';
import { PartnerSubscription } from '../model/models';
import { PartnerTier } from '../model/models';
import { SubscriptionStatus } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface PartnerServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     */
    partnerCandidateStatusListSelectAll(extraHttpRequestParams?: any): Observable<Array<PartnerCandidateStatus>>;

    /**
     * 
     * 
     */
    partnerDashboardStatsSelectAll(extraHttpRequestParams?: any): Observable<PartnerDashboardStats>;

    /**
     * 
     * 
     * @param body 
     */
    partnerDelete(body?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerCandidate 
     */
    partnerInsert(PartnerCandidate?: PartnerCandidate, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     */
    partnerLevelsSelectAll(extraHttpRequestParams?: any): Observable<Array<PartnerLevel>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsDeletePartner(PartnerID?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param SubscriptionID 
     */
    partnerSubscriptionsDeleteSubscription(SubscriptionID?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerSubscription 
     */
    partnerSubscriptionsInsert(PartnerSubscription?: PartnerSubscription, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     */
    partnerSubscriptionsSelectActive(extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     */
    partnerSubscriptionsSelectExpired(extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     */
    partnerSubscriptionsSelectHeld(extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     * @param SubscriptionID 
     */
    partnerSubscriptionsSelectItem(SubscriptionID?: number, extraHttpRequestParams?: any): Observable<PartnerSubscription>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsSelectPartnerActive(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsSelectPartnerAll(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsSelectPartnerExpired(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsSelectPartnerHeld(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnerSubscriptionsSelectPartnerSigned(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     */
    partnerSubscriptionsSelectSigned(extraHttpRequestParams?: any): Observable<Array<PartnerSubscription>>;

    /**
     * 
     * 
     */
    partnerSubscriptionsStatusSelectAll(extraHttpRequestParams?: any): Observable<Array<SubscriptionStatus>>;

    /**
     * 
     * 
     * @param PartnerSubscription 
     */
    partnerSubscriptionsUpdateItem(PartnerSubscription?: PartnerSubscription, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerSubscription 
     */
    partnerSubscriptionsUpdateStatus(PartnerSubscription?: PartnerSubscription, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     */
    partnerTiersSelectAll(extraHttpRequestParams?: any): Observable<Array<PartnerTier>>;

    /**
     * 
     * 
     * @param PartnerCandidate 
     */
    partnerUpdateAll(PartnerCandidate?: PartnerCandidate, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerID 
     * @param PartnerLevelID 
     * @param PartnerAreaOfInfluence 
     */
    partnerUpdatePartnerLevel(PartnerID?: number, PartnerLevelID?: number, PartnerAreaOfInfluence?: string, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerID 
     * @param PartnerCandidateStatusID 
     * @param PartnerCandidateStatusActionReviewNotes 
     * @param PartnerCandidateStatusActionResponseText 
     * @param PartnerLevelID 
     * @param PartnerAreaOfInfluence 
     */
    partnerUpdatePartnerStatus(PartnerID?: number, PartnerCandidateStatusID?: number, PartnerCandidateStatusActionReviewNotes?: string, PartnerCandidateStatusActionResponseText?: string, PartnerLevelID?: number, PartnerAreaOfInfluence?: string, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerCandidate 
     */
    partnerUpdateVitalsOnly(PartnerCandidate?: PartnerCandidate, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerNeed 
     */
    partnersNeedsDelete(PartnerNeed?: PartnerNeed, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerNeed 
     */
    partnersNeedsExpire(PartnerNeed?: PartnerNeed, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerNeed 
     */
    partnersNeedsInsert(PartnerNeed?: PartnerNeed, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param PartnerNeed 
     */
    partnersNeedsReactivate(PartnerNeed?: PartnerNeed, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     */
    partnersNeedsSelectActive(extraHttpRequestParams?: any): Observable<Array<PartnerNeed>>;

    /**
     * 
     * 
     */
    partnersNeedsSelectAll(extraHttpRequestParams?: any): Observable<Array<PartnerNeed>>;

    /**
     * 
     * 
     * @param PartnerNeed 
     */
    partnersNeedsUpdate(PartnerNeed?: PartnerNeed, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     */
    partnersSelectAll(extraHttpRequestParams?: any): Observable<Array<PartnerCandidate>>;

    /**
     * 
     * 
     */
    partnersSelectApproved(extraHttpRequestParams?: any): Observable<Array<PartnerCandidate>>;

    /**
     * 
     * 
     */
    partnersSelectDenied(extraHttpRequestParams?: any): Observable<Array<PartnerCandidate>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    partnersSelectItem(PartnerID?: number, extraHttpRequestParams?: any): Observable<PartnerCandidate>;

    /**
     * 
     * 
     */
    partnersSelectOpen(extraHttpRequestParams?: any): Observable<Array<PartnerCandidate>>;

    /**
     * 
     * 
     * @param ContextSponsorshipID 
     */
    sponsorshipAssignmentDelete(ContextSponsorshipID?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     * @param SubscriptionID 
     */
    sponsorshipAssignmentInsert(Context?: string, ContextKey?: number, SubscriptionID?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param ContextSponsorshipAssignmentUpdateModel 
     */
    sponsorshipAssignmentInsertBulkObject(ContextSponsorshipAssignmentUpdateModel?: ContextSponsorshipAssignmentUpdateModel, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    sponsorshipAssignmentMediaDetailSelectContext(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipMediaDetail>>;

    /**
     * 
     * 
     * @param ContextSponsorshipID 
     */
    sponsorshipAssignmentMediaDetailSelectItem(ContextSponsorshipID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipMediaDetail>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    sponsorshipAssignmentMediaDetailSelectPartner(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipMediaDetail>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    sponsorshipAssignmentPartnerSelectALL(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    sponsorshipAssignmentPartnerSelectActive(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

    /**
     * 
     * 
     * @param PartnerID 
     */
    sponsorshipAssignmentPartnerSelectExpired(PartnerID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

    /**
     * 
     * 
     * @param SubscriptionID 
     */
    sponsorshipAssignmentPartnerSelectSubscription(SubscriptionID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

    /**
     * 
     * 
     * @param SubscriptionID 
     */
    sponsorshipAssignmentPartnerSelectSubscriptionOptions(SubscriptionID?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    sponsorshipAssignmentSelectContext(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<Array<ContextSponsorshipAssignmentDetail>>;

}
