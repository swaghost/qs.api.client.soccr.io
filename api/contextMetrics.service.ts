/**
 * soccr.io API
 * An ASP.NET Core Web API for managing Soccer items
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ContextMetric } from '../model/contextMetric';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    ContextMetricsServiceInterface
} from './contextMetrics.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class ContextMetricsService implements ContextMetricsServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForDateRange(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForDateRange(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForDateRange(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForDateRange(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/DateRange`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForHour(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForHour(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForHour(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForHour(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/Hour`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForMonth(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForMonth(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForMonth(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForMonth(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/Month`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForWeek(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForWeek(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForWeek(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForWeek(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/Week`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForWeekDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForWeekDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForWeekDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForWeekDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/WeekDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (top !== undefined && top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>top, 'top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/Year`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Bottom 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectBottomForYearMonthDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectBottomForYearMonthDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForYearMonthDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectBottomForYearMonthDay(Context?: string, Metric?: string, Bottom?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Bottom !== undefined && Bottom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Bottom, 'Bottom');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Bottom/YearMonthDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForForDateRange(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForForDateRange(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForForDateRange(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForForDateRange(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/DateRange`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForHour(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForHour(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForHour(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForHour(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/Hour`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param LastNDays 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForLastNDays(Context?: string, ContextKey?: number, Metric?: string, LastNDays?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForLastNDays(Context?: string, ContextKey?: number, Metric?: string, LastNDays?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForLastNDays(Context?: string, ContextKey?: number, Metric?: string, LastNDays?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForLastNDays(Context?: string, ContextKey?: number, Metric?: string, LastNDays?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (LastNDays !== undefined && LastNDays !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>LastNDays, 'LastNDays');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/LastNDays`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForMonth(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForMonth(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForMonth(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForMonth(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/Month`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForWeek(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForWeek(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForWeek(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForWeek(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/Week`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForWeekDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForWeekDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForWeekDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForWeekDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/WeekDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForYear(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForYear(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForYear(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForYear(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/Year`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemForYearMonthDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemForYearMonthDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemForYearMonthDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemForYearMonthDay(Context?: string, ContextKey?: number, Metric?: string, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/YearMonthDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectItemOverall(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectItemOverall(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectItemOverall(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectItemOverall(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Item/Overall`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectLatestOverall(Context?: string, Metric?: string, Top?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectLatestOverall(Context?: string, Metric?: string, Top?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectLatestOverall(Context?: string, Metric?: string, Top?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectLatestOverall(Context?: string, Metric?: string, Top?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Latest/Overall`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForDateRange(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForDateRange(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForDateRange(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForDateRange(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: Date, InclusiveRangeEnd?: Date, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/DateRange`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForHour(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForHour(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForHour(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForHour(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/Hour`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForMonth(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForMonth(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForMonth(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForMonth(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/Month`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForWeek(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForWeek(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForWeek(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForWeek(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/Week`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForWeekDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForWeekDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForWeekDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForWeekDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/WeekDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForYear(Context?: string, Metric?: string, top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (top !== undefined && top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>top, 'top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/Year`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param Metric 
     * @param Top 
     * @param InclusiveRangeStart 
     * @param InclusiveRangeEnd 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsSelectTopForYearMonthDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContextMetric>>;
    public contextMetricsSelectTopForYearMonthDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContextMetric>>>;
    public contextMetricsSelectTopForYearMonthDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContextMetric>>>;
    public contextMetricsSelectTopForYearMonthDay(Context?: string, Metric?: string, Top?: number, InclusiveRangeStart?: number, InclusiveRangeEnd?: number, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (Top !== undefined && Top !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Top, 'Top');
        }
        if (InclusiveRangeStart !== undefined && InclusiveRangeStart !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeStart, 'InclusiveRangeStart');
        }
        if (InclusiveRangeEnd !== undefined && InclusiveRangeEnd !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>InclusiveRangeEnd, 'InclusiveRangeEnd');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Select/Top/YearMonthDay`;
        return this.httpClient.request<Array<ContextMetric>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsUpdate(Context?: string, ContextKey?: number, Metric?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public contextMetricsUpdate(Context?: string, ContextKey?: number, Metric?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public contextMetricsUpdate(Context?: string, ContextKey?: number, Metric?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public contextMetricsUpdate(Context?: string, ContextKey?: number, Metric?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Update`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsUpdateForTenantUser(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public contextMetricsUpdateForTenantUser(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public contextMetricsUpdateForTenantUser(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public contextMetricsUpdateForTenantUser(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Update/ForTenantUser`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param Context 
     * @param ContextKey 
     * @param Metric 
     * @param TenantID 
     * @param UserID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public contextMetricsUpdateSimple(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public contextMetricsUpdateSimple(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public contextMetricsUpdateSimple(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public contextMetricsUpdateSimple(Context?: string, ContextKey?: number, Metric?: string, TenantID?: number, UserID?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (Context !== undefined && Context !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Context, 'Context');
        }
        if (ContextKey !== undefined && ContextKey !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ContextKey, 'ContextKey');
        }
        if (Metric !== undefined && Metric !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>Metric, 'Metric');
        }
        if (TenantID !== undefined && TenantID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>TenantID, 'TenantID');
        }
        if (UserID !== undefined && UserID !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>UserID, 'UserID');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/ContextMetrics/ContextMetrics/Update/Simple`;
        return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
