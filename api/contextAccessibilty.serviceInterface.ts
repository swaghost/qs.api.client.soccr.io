/**
 * soccr.io API
 * An ASP.NET Core Web API for managing Soccer items
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AccessibilityClass } from '../model/models';
import { AccessibilityTier } from '../model/models';
import { CommonResult } from '../model/models';
import { ContextAccessibility } from '../model/models';
import { ContextAccessibilityUpdate } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ContextAccessibiltyServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param ContextAccessibilityUpdate 
     */
    contextAccessibilityBulkInsertUpdate(ContextAccessibilityUpdate?: Array<ContextAccessibilityUpdate>, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param ContextAccessibility 
     */
    contextAccessibilityDelete(ContextAccessibility?: ContextAccessibility, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    contextAccessibilityDeleteForContext(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param ContextAccessibility 
     */
    contextAccessibilityInsertUpdate(ContextAccessibility?: ContextAccessibility, extraHttpRequestParams?: any): Observable<CommonResult>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    contextAccessibilitySelectAllInner(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<Array<ContextAccessibility>>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     */
    contextAccessibilitySelectAllOuter(Context?: string, ContextKey?: number, extraHttpRequestParams?: any): Observable<Array<ContextAccessibility>>;

    /**
     * 
     * 
     * @param Context 
     * @param ContextKey 
     * @param TenantID 
     * @param UserID 
     */
    contextAccessibilityVerify(Context?: string, ContextKey?: number, TenantID?: number, UserID?: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     */
    getContextAccessibilityClasses(extraHttpRequestParams?: any): Observable<Array<AccessibilityClass>>;

    /**
     * 
     * 
     */
    getContextAccessibilityTiers(extraHttpRequestParams?: any): Observable<Array<AccessibilityTier>>;

    /**
     * 
     * 
     * @param AccessibilityClassID 
     */
    getContextAccessibilityTiersForClass(AccessibilityClassID?: number, extraHttpRequestParams?: any): Observable<Array<AccessibilityTier>>;

}
